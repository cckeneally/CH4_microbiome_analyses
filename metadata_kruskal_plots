# Load the necessary libraries
library(tidyverse)
library(DescTools)

# Select variables - uncomment last line to pull out only numeric vars
positions <- c(8:21, 24, 26:36)
numeric_vars <- metadata %>%
  filter(month == "june") %>%
  select(positions) #%>%
  #select(where(is.numeric))

# Perform Kruskal-Wallis tests for each numeric variable between the two conditions of 'dep'
kruskal_test_results <- sapply(numeric_vars, function(x) {
  kruskal.test(x ~ numeric_vars$dep)$p.value
})

# Store the results in a data frame
kruskal_test_results_df <- data.frame(Variable = names(kruskal_test_results),
                                      P_Value = kruskal_test_results)

# Filter significant variables
significance_level <- 0.05
significant_vars <- kruskal_test_results_df %>%
  filter(P_Value < significance_level) %>%
  pull(Variable)

# Function to perform the Dunn test and return the adjusted p-value
dunn_test <- function(var_name, data, grouping_var, adjustment_method = "BH") {
  # Check if the variable is numeric
  is_numeric <- is.numeric(data[[var_name]])

  if (is_numeric) {
    # Remove rows with missing values
    test_data <- data %>%
      select(!!sym(var_name), !!sym(grouping_var)) %>%
      na.omit()  # Remove rows with missing values

    # Perform the Dunn test
    test_result <- DescTools::DunnTest(test_data[[var_name]], g = as.factor(test_data[[grouping_var]]))

    # Extract the p-value matrix
    p_matrix <- test_result$pmat

    # Extract the p-value for the comparison
    comparison_p_value <- p_matrix[1, 2]

    # Adjust the p-value
    p_adjusted <- p.adjust(comparison_p_value, method = adjustment_method)
    p_adjusted  # Return the adjusted p-value for the comparison
  } else {
    NA  # Return NA for non-numeric variables
  }
}

# Perform the Dunn test for each significant variable
dunn_test_results <- sapply(significant_vars, function(x) {
  dunn_test(x, numeric_vars, "dep")
})

# Store the results in a data frame
dunn_test_results_df <- data.frame(Variable = names(dunn_test_results),
                                   Adjusted_P_Value = dunn_test_results)

# Filter significant variables based on adjusted p-values
significant_vars_dunn <- dunn_test_results_df %>%
  filter(Adjusted_P_Value < significance_level) %>%
  pull(Variable)

# Convert the metadata data frame to long format for plotting
metadata_long <- numeric_vars %>%
  select(dep, any_of(significant_vars_dunn)) %>%
  pivot_longer(cols = -dep, names_to = "Variable", values_to = "Value") %>%
  left_join(dunn_test_results_df, by = "Variable") %>%
  mutate(Adjusted_P_Value_Label = paste0(" (p = ", round(Adjusted_P_Value, 6), ")"))

# Create a custom facet label function
custom_labeller <- function(labels) {
  p_values <- metadata_long %>% distinct(Variable, Adjusted_P_Value_Label) %>% deframe()
  paste(labels, p_values[labels])
}

# Create a facetted box plot for the significant variables after the Dunn test
sigvarsplot <- ggplot(metadata_long, aes(x = dep, y = Value, fill = dep)) +
  geom_boxplot() +
  facet_wrap(~ Variable, labeller = labeller(Variable = custom_labeller), ncol = 3, scales = "free_y") +
  labs(y = "Value") +
  theme_bw() +
  theme(legend.position = "none",
        strip.background = element_blank(),
        strip.text = element_text(size = 10))

sigvarsplot
